See the Assessment Guide for information on how to interpret this report.

Want to receive personalized feedback on this submission?
You can pay to have a teaching assistant read and provide
personalized feedback on your submission at https://mooc.codepost.io.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 101 warnings)

Correctness:  34/38 tests passed
Memory:       4/8 tests passed
Timing:       0/4 tests passed

Aggregate score: 68.68%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.9K Jul 20 21:40 Percolation.java
2.2K Jul 20 21:40 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D UC_USELESS_CONDITION UC: The condition 'col != 1' always produces the same result. Either something else was meant or the condition can be removed.  At Percolation.java:[line 72]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'tValue' is final and initialized to a compile-time constant. Should it also be static?  At PercolationStats.java:[line 9]


================================================================


% pmd .
*-----------------------------------------------------------
PercolationStats.java:7: Can you replace the instance (or static) variable 'N' with a local variable? [SingularField]
PercolationStats.java:8: The private instance (or static) variable 'exp_result' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PercolationStats.java:9: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Percolation.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Percolation.java:7:23: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:8:27: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] Percolation.java:9:27: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] Percolation.java:10:17: The instance variable 'open_count' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:26:39: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:29:34: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:29:43: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:29:52: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:30:40: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:31:40: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:34:34: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:40:21: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:41:28: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:46:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:47:17: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:47:37: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:47:55: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:47:59: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:47:65: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:49:28: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:52:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:53:17: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:53:37: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:53:55: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:53:59: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:53:65: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:55:44: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:58:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:58:33: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:58:51: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:58:55: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:58:61: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:59:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:59:33: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:59:51: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:59:55: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:59:61: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Percolation.java:63:13: 'if' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 99 warnings.

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------
[WARN] PercolationStats.java:1: Use 'StdRandom' to generate random numbers. [MethodCallCount]
[WARN] PercolationStats.java:1: Use 'StdStats.mean()' to compute the mean. [MethodCallCount]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 21 total tests.

Tests 1 through 7 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Tests 12 through 15 create a Percolation object using your code, then repeatedly
call the methods open(), isOpen(), isFull(), percolates(), and, numberOfOpenSites()
in random order with probabilities p = (p1, p2, p3, p4, p5). The tests stop
immediately after the system percolates.

Tests 18 through 21 test backwash.

Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
  * filename = input8.txt
  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==> passed

Test 2: open random sites until the system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
  * filename = input1-no.txt
  * filename = input2.txt
  * filename = input2-no.txt
==> passed

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
==> passed

Test 5: open every site
  * filename = input5.txt
==> passed

Test 6: open random sites until the system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 7: open random sites with large n
  * n = 250
  * n = 500
  * n = 1000
  * n = 2000
==> passed

Test 8: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
  * n = 10, (row, col) = (11, 5)
  * n = 10, (row, col) = (0, 5)
  * n = 10, (row, col) = (5, -1)
  * n = 10, (row, col) = (5, 11)
  * n = 10, (row, col) = (5, 0)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (2147483647, 2147483647)
==> passed

Test 9: call constructor with invalid argument
  * n = -10
  * n = -1
  * n = 0
==> passed

Test 10: create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==> passed

Test 11: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==> passed

Test 12: call open(), isOpen(), and numberOfOpenSites()
         in random order until just before system percolates
  * n = 3, trials = 40, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 5, trials = 20, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 7, trials = 10, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 10, trials = 5, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 20, trials = 2, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 50, trials = 1, p = (0.4, 0.4, 0.0, 0.0, 0.3)
==> passed

Test 13: call open() and percolates() in random order until just before system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 5, trials = 20, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 7, trials = 10, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 10, trials = 5, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 20, trials = 2, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 50, trials = 1, p = (0.5, 0.0, 0.0, 0.5, 0.0)
==> passed

Test 14: call open() and isFull() in random order until just before system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 5, trials = 20, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 7, trials = 10, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 10, trials = 5, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 20, trials = 2, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 50, trials = 1, p = (0.5, 0.0, 0.5, 0.0, 0.0)
==> passed

Test 15: call all methods in random order until just before system percolates
  * n = 3, trials = 40, p = (0.2, 0.2, 0.2, 0.2, 0.2)
  * n = 5, trials = 20, p = (0.2, 0.2, 0.2, 0.2, 0.2)
  * n = 7, trials = 10, p = (0.2, 0.2, 0.2, 0.2, 0.2)
  * n = 10, trials = 5, p = (0.2, 0.2, 0.2, 0.2, 0.2)
  * n = 20, trials = 2, p = (0.2, 0.2, 0.2, 0.2, 0.2)
  * n = 50, trials = 1, p = (0.2, 0.2, 0.2, 0.2, 0.2)
==> passed

Test 16: call all methods in random order until almost all sites are open
         (with inputs not prone to backwash)
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 17: substitute WeightedQuickUnionUF data type that sets root nondeterministically;
         call all methods in random order until almost all sites are open
         (with inputs not prone to backwash)
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 18: check for backwash with predetermined sites
  * filename = input20.txt
  * filename = input10.txt
  * filename = input50.txt
  * filename = jerry47.txt
  * filename = sedgewick60.txt
  * filename = wayne98.txt
==> passed

Test 19: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
  * filename = input4.txt
  * filename = input7.txt
==> passed

Test 20: call all methods in random order until all sites are open
         (these inputs are prone to backwash)
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 21: substitute WeightedQuickUnionUF data type that sets root nondeterministically;
         call all methods in random order until all sites are open
         (these inputs are prone to backwash)
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed


Total: 21/21 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 17 total tests.

Test 1: check formatting of output of main()
  % java-algs4 PercolationStats 20 10
  mean	= 0.6345000000000001
  stddev	= 0.08232557318354973
  95% confidence interval	= [0.5834740810959764,0.6855259189040237]

  % java-algs4 PercolationStats 200 100
  mean	= 0.8687584999999998
  stddev	= 0.022948929141408187
  95% confidence interval	= [0.8642605098882837,0.8732564901117158]

==> passed

Test 2: check that methods in PercolationStats do not print to standard output
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 3: check that mean() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
    - student PercolationStats mean()     = 0.584132
    - true mean                           = 0.5939914915553629
    - 99.99% confidence interval          = [0.590174, 0.597809]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =  10, trials = 10000
    - student PercolationStats mean()     = 0.594512
    - true mean                           = 0.5904
    - 99.99% confidence interval          = [0.587665, 0.593135]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =  25, trials = 10000
    - student PercolationStats mean()     = 0.665346
    - true mean                           = 0.5917
    - 99.99% confidence interval          = [0.590140, 0.593260]
    - a correct solution will fail this test by bad luck 1 time in 10,000


==> FAILED

Test 4: check that stddev() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
    - student PercolationStats stddev() = 0.112842
    - true stddev                       = 0.102653
    - 99.99% confidence interval        = [0.099839, 0.105487]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =  10, trials = 10000
    - student PercolationStats stddev() = 0.098587
    - true stddev                       = 0.073553
    - 99.99% confidence interval        = [0.071536, 0.075583]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =  25, trials = 10000
    - student PercolationStats stddev() = 0.075525
    - true stddev                       = 0.041952
    - 99.99% confidence interval        = [0.040802, 0.043110]
    - a correct solution will fail this test by bad luck 1 time in 10,000

==> FAILED

Test 5: check that PercolationStats constructor creates
        trials Percolation objects, each of size n-by-n
  * n =  15, trials =  15
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: check that PercolationStats.main() creates
        trials Percolation objects, each of size n-by-n
  * n =  15, trials =  15
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 8: check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 9: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: check that stddev() is consistent with the number of intercepted calls to open()
         on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 11: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 12: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
  * n = -2147483648, trials = -2147483648
==> passed

Test 13: create two PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 14: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 15: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 16: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                2     34706   33333.0       2801.79
                3     65294   66667.0      -2717.53
        -------------------------------------------
                     100000  100000.0         84.27
    
    G-statistic = 84.27 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 3, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                3      4179    3571.0       1314.10
                4     15720   13889.0       3893.42
                5     29222   29365.0       -285.30
                6     31010   32937.0      -3738.99
                7     19869   20238.0       -731.23
        -------------------------------------------
                     100000  100000.0        451.99
    
    G-statistic = 451.99 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 4, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                4       364     220.0        366.57
                5      1702    1154.0       1322.69
                6      4782    3497.0       2993.09
                7      9431    7822.0       3528.36
                8     14842   13850.0       2053.41
                9     18677   19542.0      -1691.13
               10     19507   21522.0      -3835.17
               11     16263   17924.0      -3163.09
               12     10373   10733.0       -707.79
               13      4059    3736.0        673.15
        -------------------------------------------
                     100000  100000.0       1540.10
    
    G-statistic = 1540.10 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


==> FAILED

Test 17: check that each site is opened the expected number of times
  * n = 2, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
           (1, 1)     49797   66322.8     -28541.47
           (2, 1)     61330   66322.8      -9599.84
           (1, 2)     72323   66322.8      12527.68
           (2, 2)     81841   66322.8      34413.38
        -------------------------------------------
                     265291  265291.0       8799.74
    
    G-statistic = 8799.74 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 3, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
           (1, 1)     35456   59921.7     -37210.85
           (2, 1)     47412   61651.3     -24902.57
           (3, 1)     54340   59921.7     -10626.59
           (1, 2)     49901   59704.3     -17900.80
           (2, 2)     65277   63548.9       3502.85
           (3, 2)     69439   59704.3      20976.76
           (1, 3)     64773   59921.7      10085.10
           (2, 3)     77831   61651.3      36276.35
           (3, 3)     81518   59921.7      50179.96
        -------------------------------------------
                     545947  545947.0      30380.22
    
    G-statistic = 30380.22 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 4, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
           (1, 1)     27388   58202.4     -41291.32
           (2, 1)     37354   59136.4     -34321.32
           (3, 1)     45561   59136.4     -23764.08
           (4, 1)     52464   58202.4     -10891.43
           (1, 2)     38964   58094.2     -31126.65
           (2, 2)     52125   60208.0     -15028.75
           (3, 2)     60227   60208.0         37.99
           (4, 2)     66233   58094.2      17367.93
           (1, 3)     50079   58094.2     -14869.93
           (2, 3)     65134   60208.0      10244.45
           (3, 3)     72094   60208.0      25977.70
           (4, 3)     76080   58094.2      41040.44
           (1, 4)     60350   58202.4       4373.52
           (2, 4)     74218   59136.4      33718.80
           (3, 4)     80169   59136.4      48789.36
           (4, 4)     84124   58202.4      61976.78
        -------------------------------------------
                     942564  942564.0      72233.50
    
    G-statistic = 72233.50 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


==> FAILED


Total: 13/17 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Analyzing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
=> passed       16          192         
=> passed       32          320         
=> passed       64          576         
=> passed      128         1088         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 64.00   (R^2 = 1.000)

Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: Call PercolationStats constructor and instance methods and
        count calls to StdStats.mean() and StdStats.stddev().
  * n =  20, trials =  10
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

  * n =  50, trials =  20
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

  * n = 100, trials =  50
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

  * n =  64, trials = 150
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

==> FAILED

Test 2: Call PercolationStats constructor and instance methods and
        count calls to methods in StdRandom.
  * n = 20, trials = 10
    - number of student   random numbers generated in StdRandom = 14470
    - number of reference random numbers generated in StdRandom = 0
    - you should not need to generated this many random numbers in this program

  * n = 20, trials = 10
    - number of student   random numbers generated in StdRandom = 14270
    - number of reference random numbers generated in StdRandom = 0
    - you should not need to generated this many random numbers in this program

  * n = 40, trials = 10
    - number of student   random numbers generated in StdRandom = 73538
    - number of reference random numbers generated in StdRandom = 0
    - you should not need to generated this many random numbers in this program

  * n = 80, trials = 10
    - number of student   random numbers generated in StdRandom = 490272
    - number of reference random numbers generated in StdRandom = 0
    - you should not need to generated this many random numbers in this program

==> FAILED

Test 3: Call PercolationStats constructor and instance methods and
        count calls to methods in Percolation.
  * n =  20, trials =  10
    - number of student   calls to open() = 5721
    - number of reference calls to open() = 0
    - you should not need to call open() this many times

    - number of student   calls to percolates() = 5721
    - number of reference calls to percolates() = 0
    - you should not need to call percolates() this many times

  * n =  50, trials =  20
    - number of student   calls to open() = 118819
    - number of reference calls to open() = 0
    - you should not need to call open() this many times

    - number of student   calls to percolates() = 118819
    - number of reference calls to percolates() = 0
    - you should not need to call percolates() this many times

  * n = 100, trials =  50
    - number of student   calls to open() = 2051232
    - number of reference calls to open() = 0
    - you should not need to call open() this many times

    - number of student   calls to percolates() = 2051232
    - number of reference calls to percolates() = 0
    - you should not need to call percolates() this many times

  * n =  64, trials = 150
    - number of student   calls to open() = 1889276
    - number of reference calls to open() = 0
    - you should not need to call open() this many times

    - number of student   calls to percolates() = 1889276
    - number of reference calls to percolates() = 0
    - you should not need to call percolates() this many times

==> FAILED

Test 4: Call PercolationStats constructor and instance methods with trials = 3
        and values of n that go up by a multiplicative factor of sqrt(2).
        The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       181     0.32       3.8
       256     1.08       3.5
       362     3.98       3.8
       512    15.50       3.9
     [ exceeded the time limit of 15.0 seconds ]

==> FAILED


Total: 0/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        45264         
=> passed      256       671952         
=> passed      512      2654416         


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.
         This usually indicates a performance bug or an infinite loop.




Total: 0/4 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=> passed       16          148                   272                   1         
=> passed       32          630                  1126                   1         
=> passed       64         2793                  4752                   1         
=> passed      128        11863                 19704                   1         
=> passed      256        46742                 78166                   1         
=> passed      512       185413                311716                   1         